---
import { getCollection, type CollectionEntry } from 'astro:content';
import NoteCard from './NoteCard.astro';

interface Props {
  currentNote: CollectionEntry<'notes'>;
}

const { currentNote } = Astro.props;

// Get all notes except the current one
const allNotes = await getCollection('notes', ({ data }) => {
  return data.draft !== true;
});

const otherNotes = allNotes.filter(note => note.slug !== currentNote.slug);

let recommendedNotes: CollectionEntry<'notes'>[] = [];

// If the note has specific recommendations in frontmatter
if (currentNote.data.recommendations && currentNote.data.recommendations.length > 0) {
  // Get the specific recommended notes
  const specificRecommendations = otherNotes.filter(note => 
    currentNote.data.recommendations?.includes(note.slug)
  );
  recommendedNotes = specificRecommendations.slice(0, 2);
  
  // If we need more recommendations, fill with random ones
  if (recommendedNotes.length < 2) {
    const remainingNotes = otherNotes.filter(note => 
      !currentNote.data.recommendations?.includes(note.slug)
    );
    const additionalNeeded = 2 - recommendedNotes.length;
    const shuffled = remainingNotes.sort(() => Math.random() - 0.5);
    recommendedNotes = [...recommendedNotes, ...shuffled.slice(0, additionalNeeded)];
  }
} else {
  // No specific recommendations, get 2 random notes
  const shuffled = otherNotes.sort(() => Math.random() - 0.5);
  recommendedNotes = shuffled.slice(0, 2);
}

// Only show recommendations if we have notes to recommend
const showRecommendations = recommendedNotes.length > 0;
---

{showRecommendations && (
  <section>
    <h2 class="text-2xl font-bold text-gray-900 mb-8">
      More Notes
    </h2>
    <div class="grid gap-6 md:gap-8">
      {recommendedNotes.map((note) => (
        <NoteCard note={note} showBorder={false} />
      ))}
    </div>
  </section>
)}